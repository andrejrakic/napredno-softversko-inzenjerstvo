{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","statusMessage","setStatusMessage","isButtonDisabled","setIsButtonDisabled","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","chainId","askContractToMintNft","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","ElfakNFT","abi","makeAnNFT","nftTxn","wait","hash","useEffect","className","onClick","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gplEA4IeA,EAvIH,WACX,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAgDJ,oBAAS,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KAEMC,EAAwB,uCAAG,kCAAAC,EAAA,2DACXC,OAAbC,EADwB,EACxBA,SADwB,uBAI/BC,QAAQC,IAAI,gCAJmB,0BAO/BD,QAAQC,IAAI,8BAA+BF,GAPZ,uBAUTA,EAASG,QAAQ,CAAEC,OAAQ,iBAVlB,OAYR,KAFlBC,EAV0B,QAYnBC,QACNC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5Cf,EAAkBe,IAElBN,QAAQC,IAAI,+BAjBmB,4CAAH,qDAwBxBM,EAAa,uCAAG,kCAAAV,EAAA,oEAECC,OAAbC,EAFY,EAEZA,SAFY,uBAKnBS,MAAM,iBALa,0CASGT,EAASG,QAAQ,CACvCC,OAAQ,wBAVW,cASdC,EATc,iBAaAL,EAASG,QAAQ,CAAEC,OAAQ,gBAb3B,QAahBM,EAbgB,OAgBpBlB,EAAkBa,EAAS,IAEJ,cACnBK,GACHD,MAAM,sDApBa,kDAuBpBR,QAAQC,IAAR,MAvBoB,0DAAH,qDAmCbS,EAAoB,uCAAG,sCAAAb,EAAA,yDACH,6CADG,WAINC,SAAbC,EAJmB,EAInBA,UAJmB,wBAOpBY,EAAW,IAAIC,IAAOC,UAAUC,aAAaf,GAC7CgB,EAASJ,EAASK,YAClBC,EAAoB,IAAIL,IAAOM,SARd,6CAUtBC,EAASC,IACTL,GAGDf,QAAQC,IAAI,yCAfc,UAgBPgB,EAAkBI,YAhBX,eAgBtBC,EAhBsB,OAkB1B7B,EAAiB,yBACjBE,GAAoB,GAnBM,UAoBpB2B,EAAOC,OApBa,QAsB1B9B,EAAiB,2DAAD,OAC4C6B,EAAOE,OAEnE7B,GAAoB,GAzBM,wBA2B1BK,QAAQC,IAAI,kCA3Bc,0DA8B3BD,QAAQC,IAAR,MA9B2B,0DAAH,qDAyC1B,OAPAwB,qBAAU,WACT7B,MACE,IAMF,qBAAK8B,UAAU,MAAf,SACC,sBAAKA,UAAU,YAAf,UACC,sBAAKA,UAAU,mBAAf,UACC,mBAAGA,UAAU,uBAAb,sCACA,uBACCpC,GACA,oBAAGoC,UAAU,WAAb,wBAAoCpC,KAEpCE,GAAiB,oBAAGkC,UAAU,WAAb,cAA0BlC,KACxB,KAAnBF,EA1DJ,wBACCqC,QAASpB,EACTmB,UAAU,mCAFX,+BA6DI,wBACCE,SAAUlC,EACViC,QAASjB,EACTgB,UAAU,mCAHX,yBAQF,sBAAKA,UAAU,cAAf,UACC,sDACA,4DChILG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e66e95d8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './styles/App.css';\nimport { ethers } from 'ethers';\nimport ElfakNFT from './utils/ElfakNFT.json';\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst [statusMessage, setStatusMessage] = useState('');\n\tconst [isButtonDisabled, setIsButtonDisabled] = useState(false);\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\n\t\tif (!ethereum) {\n\t\t\tconsole.log('Make sure you have metamask!');\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log('We have the ethereum object', ethereum);\n\t\t}\n\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\tsetCurrentAccount(account);\n\t\t} else {\n\t\t\tconsole.log('No authorized account found');\n\t\t}\n\t};\n\n\t/*\n\t * Implement your connectWallet method here\n\t */\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert('Get MetaMask!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: 'eth_requestAccounts',\n\t\t\t});\n\n\t\t\tlet chainId = await ethereum.request({ method: 'eth_chainId' });\n\n\t\t\t// console.log('Connected', accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\n\t\t\tconst rinkebyChainId = '0x4';\n\t\t\tif (chainId !== rinkebyChainId) {\n\t\t\t\talert('You are not connected to the Rinkeby Test Network!');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst renderNotConnectedContainer = () => (\n\t\t<button\n\t\t\tonClick={connectWallet}\n\t\t\tclassName='cta-button connect-wallet-button'>\n\t\t\tConnect to Wallet\n\t\t</button>\n\t);\n\n\tconst askContractToMintNft = async () => {\n\t\tconst CONTRACT_ADDRESS = '0xdD4cc64385D93B6330475564607cE665DB75A8a3';\n\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tElfakNFT.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\tconsole.log('Going to pop wallet now to pay gas...');\n\t\t\t\tlet nftTxn = await connectedContract.makeAnNFT();\n\n\t\t\t\tsetStatusMessage('Mining...please wait.');\n\t\t\t\tsetIsButtonDisabled(true);\n\t\t\t\tawait nftTxn.wait();\n\n\t\t\t\tsetStatusMessage(\n\t\t\t\t\t`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n\t\t\t\t);\n\t\t\t\tsetIsButtonDisabled(false);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, []);\n\n\t/*\n\t * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n\t */\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div className='container'>\n\t\t\t\t<div className='header-container'>\n\t\t\t\t\t<p className='header gradient-text'>Elektronski Fakultet NFT</p>\n\t\t\t\t\t<br />\n\t\t\t\t\t{currentAccount && (\n\t\t\t\t\t\t<p className='sub-text'>Connected: {currentAccount}</p>\n\t\t\t\t\t)}\n\t\t\t\t\t{statusMessage && <p className='sub-text'> {statusMessage}</p>}\n\t\t\t\t\t{currentAccount === '' ? (\n\t\t\t\t\t\trenderNotConnectedContainer()\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tdisabled={isButtonDisabled}\n\t\t\t\t\t\t\tonClick={askContractToMintNft}\n\t\t\t\t\t\t\tclassName='cta-button connect-wallet-button'>\n\t\t\t\t\t\t\tMint NFT\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className='footer-text'>\n\t\t\t\t\t<h3>Aleksa Djurovic 1321</h3>\n\t\t\t\t\t<h3>Andrej Rakic 1390</h3>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}